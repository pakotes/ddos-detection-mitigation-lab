#!/usr/bin/env python3
"""
Valida√ß√£o melhorada para datasets realistas
Verifica se os resultados s√£o realistas (n√£o overfitting)
"""

import logging
import numpy as np
import pandas as pd
import json
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, classification_report

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s:%(name)s:%(message)s'
)
logger = logging.getLogger(__name__)

def validate_realistic_results():
    """Validar resultados dos modelos realistas"""
    logger.info("Validando resultados dos modelos REALISTAS...")
    
    models_dir = Path(__file__).parent.parent.parent / 'src' / 'models' / 'realistic'
    
    if not models_dir.exists():
        logger.error("Diret√≥rio de modelos realistas n√£o encontrado!")
        logger.info("Execute primeiro: ddos-train-realistic")
        return False
    
    # Verificar arquivos de resultados
    result_files = list(models_dir.glob('results_*.json'))
    
    if not result_files:
        logger.error("Nenhum arquivo de resultados encontrado!")
        return False
    
    logger.info(f"\n{'='*60}")
    logger.info("VALIDA√á√ÉO DE QUALIDADE DOS MODELOS REALISTAS")
    logger.info(f"{'='*60}")
    
    all_results = {}
    
    for result_file in result_files:
        dataset_name = result_file.stem.replace('results_', '')
        
        with open(result_file, 'r') as f:
            results = json.load(f)
        
        all_results[dataset_name] = results
        
        logger.info(f"\n--- DATASET: {dataset_name.upper()} ---")
        
        # Analisar cada modelo
        models = results.get('models', {})
        
        for model_name, metrics in models.items():
            accuracy = metrics.get('accuracy', 0)
            f1 = metrics.get('f1_score', 0)
            precision = metrics.get('precision', 0)
            recall = metrics.get('recall', 0)
            
            logger.info(f"{model_name:20}: Acc={accuracy:.3f}, F1={f1:.3f}, Prec={precision:.3f}, Rec={recall:.3f}")
            
            # Avaliar qualidade
            if accuracy >= 1.0:
                logger.warning(f"  ‚ö†Ô∏è  OVERFITTING SUSPEITO: {model_name} com {accuracy:.3f} accuracy")
            elif accuracy >= 0.99:
                logger.info(f"  ‚úÖ BOM: {model_name} com {accuracy:.3f} accuracy (realista)")
            elif accuracy >= 0.90:
                logger.info(f"  ‚úÖ ACEIT√ÅVEL: {model_name} com {accuracy:.3f} accuracy")
            else:
                logger.warning(f"  ‚ö†Ô∏è  BAIXO: {model_name} com {accuracy:.3f} accuracy")
            
            # Verificar cross-validation se dispon√≠vel
            cv_mean = metrics.get('cv_f1_mean')
            cv_std = metrics.get('cv_f1_std')
            
            if cv_mean is not None and cv_std is not None:
                logger.info(f"    CV F1: {cv_mean:.3f} ¬± {cv_std:.3f}")
                
                # Verificar consist√™ncia
                if abs(f1 - cv_mean) > 0.05:
                    logger.warning(f"    ‚ö†Ô∏è  Grande diferen√ßa entre teste e CV")
            
            # Verificar confian√ßa dos modelos
            conf_stats = metrics.get('confidence_stats', {})
            if conf_stats:
                mean_conf = conf_stats.get('mean_confidence', 0)
                high_conf_ratio = conf_stats.get('high_confidence_ratio', 0)
                
                logger.info(f"    Confian√ßa m√©dia: {mean_conf:.3f}")
                logger.info(f"    % alta confian√ßa: {high_conf_ratio:.1%}")
                
                if high_conf_ratio > 0.95:
                    logger.warning(f"    ‚ö†Ô∏è  Muita confian√ßa alta ({high_conf_ratio:.1%}) - poss√≠vel overfitting")
    
    # Resumo geral
    logger.info(f"\n{'='*60}")
    logger.info("RESUMO GERAL")
    logger.info(f"{'='*60}")
    
    total_models = 0
    good_models = 0
    overfitting_models = 0
    
    for dataset_name, results in all_results.items():
        best_acc = results.get('summary', {}).get('best_accuracy', 0)
        best_f1 = results.get('summary', {}).get('best_f1', 0)
        
        logger.info(f"{dataset_name:15}: Melhor Acc={best_acc:.3f}, Melhor F1={best_f1:.3f}")
        
        models = results.get('models', {})
        for model_name, metrics in models.items():
            total_models += 1
            accuracy = metrics.get('accuracy', 0)
            
            if accuracy >= 1.0:
                overfitting_models += 1
            elif accuracy >= 0.90:
                good_models += 1
    
    logger.info(f"\nEstat√≠sticas:")
    logger.info(f"  Total de modelos: {total_models}")
    logger.info(f"  Modelos bons (>90%): {good_models}")
    logger.info(f"  Modelos com overfitting (100%): {overfitting_models}")
    logger.info(f"  Taxa de sucesso: {(good_models/total_models):.1%}")
    
    # Avalia√ß√£o final
    if overfitting_models == 0:
        logger.info(f"\nüéâ EXCELENTE: Nenhum modelo com overfitting!")
        logger.info(f"   Os datasets realistas funcionaram perfeitamente.")
    elif overfitting_models <= total_models * 0.2:
        logger.info(f"\n‚úÖ BOM: Apenas {overfitting_models} de {total_models} modelos com overfitting.")
    else:
        logger.warning(f"\n‚ö†Ô∏è  ATEN√á√ÉO: {overfitting_models} de {total_models} modelos com overfitting.")
        logger.warning(f"   Considere aumentar o overlap nos datasets.")
    
    return True

def analyze_dataset_quality():
    """Analisar qualidade dos datasets criados"""
    logger.info(f"\n{'='*60}")
    logger.info("AN√ÅLISE DE QUALIDADE DOS DATASETS")
    logger.info(f"{'='*60}")
    
    datasets_dir = Path(__file__).parent.parent.parent / 'src' / 'datasets' / 'realistic'
    
    if not datasets_dir.exists():
        logger.warning("Diret√≥rio de datasets realistas n√£o encontrado!")
        return False
    
    # Analisar cada dataset
    for dataset_name in ['cicddos', 'unsw', 'integrated']:
        metadata_file = datasets_dir / f'metadata_{dataset_name}.json'
        
        if not metadata_file.exists():
            logger.warning(f"Metadados n√£o encontrados para {dataset_name}")
            continue
        
        with open(metadata_file, 'r') as f:
            metadata = json.load(f)
        
        logger.info(f"\n--- DATASET: {dataset_name.upper()} ---")
        logger.info(f"Amostras totais: {metadata.get('total_samples', 'N/A'):,}")
        logger.info(f"Features: {metadata.get('n_features', 'N/A')}")
        logger.info(f"Classes: {metadata.get('n_classes', 'N/A')}")
        logger.info(f"Taxa de ataques: {metadata.get('attack_ratio', 0):.1%}")
        logger.info(f"Taxa normal: {metadata.get('normal_ratio', 0):.1%}")
        
        # Verificar balanceamento
        attack_ratio = metadata.get('attack_ratio', 0)
        if attack_ratio >= 1.0:
            logger.error(f"  ‚ùå PROBLEMA: 100% ataques, sem amostras normais!")
        elif attack_ratio >= 0.95:
            logger.warning(f"  ‚ö†Ô∏è  Muito desbalanceado: {attack_ratio:.1%} ataques")
        elif 0.3 <= attack_ratio <= 0.8:
            logger.info(f"  ‚úÖ Bem balanceado: {attack_ratio:.1%} ataques")
        else:
            logger.warning(f"  ‚ö†Ô∏è  Balanceamento question√°vel: {attack_ratio:.1%} ataques")
        
        # Verificar melhorias implementadas
        improvements = metadata.get('improvements', [])
        if improvements:
            logger.info(f"  Melhorias implementadas: {len(improvements)}")
            for improvement in improvements:
                logger.info(f"    - {improvement}")
    
    return True

def main():
    """Fun√ß√£o principal"""
    logger.info("Iniciando valida√ß√£o completa dos modelos realistas...")
    
    try:
        # 1. Validar resultados dos modelos
        if not validate_realistic_results():
            return False
        
        # 2. Analisar qualidade dos datasets
        if not analyze_dataset_quality():
            logger.warning("An√°lise de datasets falhou, mas continuando...")
        
        logger.info(f"\n{'='*60}")
        logger.info("VALIDA√á√ÉO CONCLU√çDA")
        logger.info(f"{'='*60}")
        logger.info("‚úÖ Valida√ß√£o dos modelos realistas conclu√≠da com sucesso!")
        logger.info("üìä Verifique os logs acima para detalhes da qualidade.")
        
        return True
        
    except Exception as e:
        logger.error(f"Erro na valida√ß√£o: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
